[server]
host: 0.0.0.0
#  The host address in which to bind the HTTP server.  Default is to bind
#  to all interfaces
port: 7125
#   The port the HTTP server will listen on.  Default is 7125
# ssl_port: 7130
# #   The port to listen on for SSL (HTTPS) connections.  Note that the HTTPS
# #   server will only be started of the certificate and key options outlined
# #   below are provided.  The default is 7130.
# ssl_certificate_path:
# #   The path to a self signed ssl certificate.  The default is no path, which
# #   disables HTTPS.
# ssl_key_path:
# #   The path to the private key used to signed the certificate.  The default
# #   is no path, which disables HTTPS.
# klippy_uds_address: /tmp/klippy_uds
# #   The address of Unix Domain Socket used to communicate with Klippy. Default
# #   is /tmp/klippy_uds
# max_upload_size: 1024
# #   The maximum size allowed for a file upload (in MiB).  Default is 1024 MiB.
# enable_debug_logging: False
# #   When set to True Moonraker will log in verbose mode.  During this stage
# #   of development the default is False.


[file_manager]
config_path: ~/klipper_config
#   The path to a directory where configuration files are located. This
#   directory may contain Klipper config files (printer.cfg) or Moonraker
#   config files (moonraker.conf).  Clients may also write their own config
#   files to this directory.  Note that this may not be the system root
#   (ie: "/") and moonraker must have read and write access permissions
#   for this directory.
log_path: ~/klipper_logs
#   An optional path to a directory where log files are located.  Users may
#   configure various applications to store logs here and Moonraker will serve
#   them at "/server/files/logs/*".  The default is no log paths.
queue_gcode_uploads: False
#   When set to True the file manager will add uploads to the job_queue when
#   the `start_print` flag has been set.  The default if False.
enable_object_processing: False
#   When set to True gcode files will be run through a "preprocessor"
#   during metadata extraction if object tags are detected.  This preprocessor
#   replaces object tags with G-Code commands compatible with Klipper's
#   "cancel object" functionality.  Note that this process is file I/O intensive,
#   it is not recommended for usage on low resource SBCs such as a Pi Zero.
#   The default is False.


[machine]
provider: systemd_cli
#   The provider implementation used to collect system service information
#   and run service actions (ie: start, restart, stop).  This can be "none",
#   "systemd_dbus", or "systemd_cli".  If the provider is set to "none" service
#   action APIs will be disabled.  The default is systemd_dbus.


[database]
database_path: ~/.moonraker_database
#   The path to the folder that stores Moonraker's lmdb database files.
#   It is NOT recommended to place this file in a location that is served by
#   Moonraker (such as the "config_path" or the location where gcode
#   files are stored).  If the folder does not exist an attempt will be made
#   to create it.  The default is ~/.moonraker_database.


[data_store]
temperature_store_size: 1200
#   The maximum number of temperature values to store for each sensor. Note
#   that this value also applies to the "target", "power", and "fan_speed"
#   if the sensor reports them.  The default is 1200, which is enough to
#   store approximately 20 minutes of data at one value per second.
gcode_store_size:  1000
#   The maximum number "gcode lines" to store.  The default is 1000.


[job_queue]
load_on_startup: False
#   When set to true the job queue will attempt to load the next
#   pending job when Klipper reports as "Ready".  If the queue has
#   been paused it will automatically resume.  Note that neither
#   the job_transition_delay nor the job_transition_gcode are
#   applied in this case.  The default is False.
automatic_transition: False
#   When set to True the queue will automatically transition to
#   the next job in the queue after the current job is complete.
#   This is useful for belt printers and other machines with the
#   ability to automate clearing of the build area.  When False
#   the queue will be paused after each job is loaded, requiring
#   that users manually resume to load the next print.  The default
#   is False.
# job_transition_delay:
# #   The amount of time to delay after completion of a job before
# #   loading the next job on the queue.  The default is no delay.
# job_transition_gcode:
# #   A gcode to execute after the completion of a job before the next
# #   job is loaded.  If a "job_transition_delay" has been configured
# #   this gcode will run after the delay.  The default is no gcode.


# [announcements]
# subscriptions:
# #   A newline separated list announcement "subscriptions".  Generally
# #   this would refer to specific clients that are registered to provide
# #   announcements.  All items specified here are added in addition to
# #   "moonraker" and "klipper", which are always subscribed to.  The default
# #   is no additional subscriptions.
# dev_mode: False
# #   A developer option that fetches RSS announcements from a local folder when
# #   set to True. The default behavior is for Moonraker to retrieve announcements
# #   from RSS feeds generated by the "moonlight" repo on GitHub.


[authorization]
login_timeout: 1
#   The time, in days, after which a user is forced to re-enter their
#   credentials to log in.  This period begins when a logged out user
#   first logs in.  Successive logins without logging out will not
#   renew the timeout.  The default is 90 days.
trusted_clients:
 192.168.10.0/24
 10.0.0.0/24
 my-printer.lan
#   A list of newline separated ip addresses, ip ranges, or fully qualified
#   domain names that are trusted. Trusted clients are given full access to
#   the API.  Both IPv4 and IPv6 addresses and ranges are supported. Ranges
#   must be expressed in CIDR notation (see http://ip.sb/cidr for more info).
#   For example, an entry of 192.168.1.0/24 will authorize IPs in the range of
#   192.168.1.1 - 192.168.1.254.  Note that when specifying IPv4 ranges the
#   last segment of the ip address must be 0. The default is no clients are
#   trusted.
cors_domains:
  *
  # http://klipper-printer.local
  # http://second-printer.local:7125
#   Enables CORS for the specified domains.  One may specify * if they wish
#   to allow all domains, however this should be an option reserved for
#   client developers and not used in production.  A * can also be used
#   to specify a wildcard that matches several domains.  For example:
#     *.local
#     http://*.my-domain.com
#     *.my-domain.com:*
#   Are all valid entries.  However, a wildcard may not be specified in
#   the top level domain:
#      http://my-printer.*
#   The above example will be rejected.
#   When CORS is enabled by adding an entry to this option, all origins
#   matching the "trusted_clients" option will have CORS headers set as
#   well.  If this option is not specified then CORS is disabled.
force_logins: False
#   When set to True a user login is required for authorization if at least
#   one user has been created, overriding the "trusted_clients" configuration.
#   If no users have been created then trusted client checks will apply.
#   The default is False.


# [octoprint_compat]
# enable_ufp: True
# #   When set to True the octoprint_compat module will report that the UFP
# #   plugin is available.  If the installed version of Cura supports UFP
# #   files will be uploaded in UFP format.  When set to False Cura will
# #   upload files in .gcode format.  This setting has no impact on other
# #   slicers.  The default is True.
# flip_h: False
# #   Set the webcam vertical flip.  The default is False.
# rotate_90: False
# #   Set the webcam rotation by 90 degrees.  The default is False.
# stream_url: /webcam/?action=stream
# #   The URL to use for streaming the webcam.  It can be set to an absolute
# #   URL if needed. In order to get the webcam to work in Cura through
# #   an OctoPrint connection, you can set this value to
# #   http://<octoprint ip>/webcam/?action=stream.  The default value is
# #   /webcam/?action=stream.
# webcam_enabled: True
# #   Enables the webcam.  The default is True.


[history]
; Enables print history tracking.


# [power mqtt_plug]
# type: mqtt
# qos:
# #  The MQTT QOS level to use when publishing and subscribing to topics.
# #  The default is to use the setting supplied in the [mqtt] section.
# command_topic:
# #  The mqtt topic used to publish commands to the device.  This parameter must
# #  be provided.
# command_payload:
#   {command}
# #  The payload sent with the topic.  This can be a template, with a "command"
# #  variable included in the template context, where "command" is either "on"
# #  or "off".  For example:
# #    {% if command == "on" %}
# #      TURN_ON
# #    {% else %}
# #      TURN_OFF
# #    {% endif %}
# #  The above example would resolve to "TURN_ON" if the request is turn the
# #  the device on, and "TURN_OFF" if the request is to turn the device off.
# #  This parameter must be provided.
# retain_command_state:
# #  If set to True the retain flag will be set when the command topic is
# #  published.  Default is False.
# state_topic:
# #  The mqtt topic to subscribe to for state updates.  This parameter must be
# #  provided.
# state_response_template:
# #  A template used to parse the payload received with the state topic.  A
# #  "payload" variable is provided the template's context.  This template
# #  must resolve to "on" or "off".  For example:
# #    {% set resp = payload|fromjson %}
# #    {resp["POWER"]}
# #  The above example assumes a json response is received, with a "POWER" field
# #  that set to either "ON" or "OFF".  The resolved response will always be
# #  trimmed of whitespace and converted to lowercase. The default is the payload.
# state_timeout:
# #  The amount of time (in seconds) to wait for the state topic to receive an
# #  update. If the timeout expires the device revert to an "error" state.  This
# #  timeout is applied during initialization and after a command has been sent.
# #  The default is 2 seconds.
# query_topic:
# #  The topic used to query command state.  It is expected that the device will
# #  respond by publishing to the "state_topic".  This parameter is optional,
# query_payload:
# #  The payload to send with the query topic.  This may be a template or a string.
# #  The default is no payload.
# query_after_command:
# #  If set to True Moonraker will publish the query topic after publishing the
# #  command topic.  This should only be necessary if the device does not publish a
# # #  response to a command request to the state topic.  The default is False.


[update_manager]
enable_repo_debug: False
#   When set to True moonraker will bypass repo validation and allow
#   updates from unofficial remotes and/or branches.  Updates on
#   detached repos are also allowed.  This option is intended for
#   developers and should not be used on production machines.  The
#   default is False.
enable_auto_refresh: True
#   When set to True Moonraker will attempt to fetch status about
#   available updates roughly every 24 hours, between 12am-4am.
#   When set to False Moonraker will only fetch update state on startup
#   and clients will need to request that Moonraker updates state.  The
#   default is False.
refresh_interval: 672
#   The interval (in hours) after which the update manager will check
#   for new updates.  This interval is applies to updates for Moonraker,
#   Klipper, and System Packages, and is the default for all clients.
#   The default is 672 hours (28 days).
enable_system_updates: True
#   A boolean value that can be used to toggle system package updates.
#   Currently Moonraker only supports updating packages via APT, so
#   this option is useful for users that wish to experiment with linux
#   distros that use other package management applications, or users
#   that prefer to manage their packages directly.  Note that if this
#   is set to False users will be need to make sure that all system
#   dependencies are up to date.  The default is True.
enable_packagekit: False
#   This option is available when system updates are enabled via the
#   "enable_system_updates" option.  When set to True, system package
#   updates will be processed via PackageKit over D-Bus.  When set to False
#   the "apt cli" fallback will be used.  The default is True.
channel: dev
#   The update channel applied to Klipper and Moonraker.  May dev or
#   beta.  The dev channel will update to the latest commit pushed
#   to the repo, whereas the beta channel will update to the latest
#   commit tagged by Moonraker.  The beta channel will see less frequent
#   updates and should be more stable.  Users on the beta channel will have
#   more opportunity to review breaking changes before choosing to update.
#   The default is dev.


# this enabled fluidd updates
[update_manager client fluidd]
type: web
repo: cadriel/fluidd
path: ~/fluidd